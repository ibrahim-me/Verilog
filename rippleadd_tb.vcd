$date
	Tue Sep 27 12:03:21 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module rippleadd_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module uut $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " cout $end
$var wire 1 ) c3 $end
$var wire 1 * c2 $end
$var wire 1 + c1 $end
$scope module f1 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 . c $end
$var wire 1 % cin $end
$var wire 1 + cout $end
$var wire 1 / sum $end
$var wire 1 0 w0 $end
$var wire 1 1 w1 $end
$var wire 1 2 w2 $end
$upscope $end
$scope module f2 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 c $end
$var wire 1 + cin $end
$var wire 1 * cout $end
$var wire 1 6 sum $end
$var wire 1 7 w0 $end
$var wire 1 8 w1 $end
$var wire 1 9 w2 $end
$upscope $end
$scope module f3 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 < c $end
$var wire 1 * cin $end
$var wire 1 ) cout $end
$var wire 1 = sum $end
$var wire 1 > w0 $end
$var wire 1 ? w1 $end
$var wire 1 @ w2 $end
$upscope $end
$scope module f4 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C c $end
$var wire 1 ) cin $end
$var wire 1 " cout $end
$var wire 1 D sum $end
$var wire 1 E w0 $end
$var wire 1 F w1 $end
$var wire 1 G w2 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0G
0F
0E
0D
zC
0B
0A
0@
0?
0>
0=
z<
0;
0:
09
08
07
06
z5
04
03
02
01
00
0/
z.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#10
b100 !
b100 (
1=
1*
1"
x8
xF
17
x9
1E
xG
14
1B
13
1A
b1010 $
b1010 '
b1010 #
b1010 &
#15
16
b1110 !
b1110 (
1D
1+
1)
x1
x?
10
x2
1>
x@
1-
1;
1,
1:
b1111 $
b1111 '
b1111 #
b1111 &
#20
x6
x+
x)
x"
1/
00
01
0=
0>
0?
bx0x1 !
bx0x1 (
xD
0E
0F
0-
0;
0B
b10 $
b10 '
